\input texinfo
@c %**start of header
@setfilename wo-graph.info
@settitle Wims Simple Graph Infrastructure
@c %**end of header

@copying
Copyright @copyright{} 2012, Willem Rein Oudshoorn
All rights reserved.

The basic license is GPL version 3.0 or later. 
However if you have a need for a different license,
please ask me and I most likely will dual license it.
@end copying

@finalout
@setcontentsaftertitlepage

@titlepage
@title WO-Graph
@subtitle Wims Simple Graph Infrastructure
@author Willem Rein Oudshoorn
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@include include/sb-texinfo.texinfo


@node Top, Overview, (dir), (dir)
@top Introduction

Typically graph algorithms should not depend on the underlying
implementation of a graph data structure.  The algorithms
should only use a well defined interface to query and manipulate graphs.

This package defines an interface for graph algorithms to use and
an interface for graph data structures to implement.

For more interesting functions look at the
@url{http://github.com/woudshoo/wo-graph-functions/} project.
That project contains actual functions for graph manipulations.

the source code of this project is available at 
@url{http://github.com/woudshoo/wo-graph/}.
@contents

@menu
* Overview::
* Graph Algorithmic Interface::
* Data Structure Interface::
* Function Index::
* Simple Graph:: A default implementation
@end menu

@node Overview, Data Structure Interface, Top, Top
@chapter Overview

When trying to decouple the implementation of graph algorithms from the
implementation of graph data structures one faces two opposing forces.
The graph algorithms are made easier if many primitive operations are
provided by the graph data structures, but implementing a graph
data structure becomes harder when more primitive operations need to be provided.

This package tries to strike a balance between the two sides and provide
an interface which is easy to implement for graph data structures and is rich enough
to make implementing interesting graph algorithms comfortable.

In addition to the interface, this package has a simple implementation
of a graph data structure, so it is ready to use.


@node Data Structure Interface, Graph Algorithmic Interface, Overview, Top
@chapter Data Structure Interface

Implementing a graph datastructure, such as the @code{simple-graph} 
supplied in this package, consists of implementing a list of about 12
generic functions, dealing with querying and modifying the graph.

At the moment there is no standardized way on how to create an empty graph.
That is left undefined.

The list of methods to implement are divided into 4 categories:

@menu 
* Vertices::
* Edges::
* Markers::
* Miscellaneous Functions::    
@end menu


@node Vertices, Edges, Data Structure Interface, Data Structure Interface
@section Vertices

The graph implementation can decide which kind of objects represent
vertices.  There are no constraint from the API on the type of object
used to represent a vertex.  Of course the implementation of the 
vertex and edge methods need to be consistent.  That is, if you have
a graph like

@example
  A --[E]--> B.
@end example

The source vertex of [E] should be the same as vertex A.
Also the outgoing edge of A should be the same as [E].

Now the `same' is defined loosely.  The algorithms building on this
should never compare vertices for sameness.  The only constraint on
sameness is that the graph structures implementing this interface deals
with them in a consistent and sane matter.  So in the example above,
adding the source vertex of [E] to the graph should do nothing, because
the vertex is already present.

@menu
* Vertex Functions::
@end menu

@node Vertex Functions,  , Vertices, Vertices
@subsection Vertex Functions

@include include/fun-wo-graph-all-vertices.texinfo

@include include/fun-wo-graph-add-vertex.texinfo
@include include/fun-wo-graph-remove-vertex.texinfo

@include include/fun-wo-graph-outgoing-edges.texinfo
@include include/fun-wo-graph-incoming-edges.texinfo



@node Edges, Markers, Vertices, Data Structure Interface
@section Edges

What are considered edges in the graph is up to the implementation of
the graph data structure.  The only constraint is that the type of edges
should not be @code{cons}.  So @code{(type edge 'cons) => nil}.

@menu
* Edge Functions::
@end menu

@node Edge Functions,  , Edges, Edges
@subsection Edge Functions

@include include/fun-wo-graph-add-edge.texinfo
@include include/fun-wo-graph-remove-edge.texinfo

@include include/fun-wo-graph-source-vertex.texinfo
@include include/fun-wo-graph-target-vertex.texinfo

@node Markers, Miscellaneous Functions, Edges, Data Structure Interface
@section Markers


Graph functions typically need to store temporary data with vertices (or edges). 
For this the API provides markers.  A marker is explicitly requested from the graph
and can be used to attach data to a vertex.  Like

@lisp
    ;; Creating the marker (assuming *graph* is a graph)
    (set *marker* (get-vertex-marker *graph*)) 

    ;; Setting a mark for vertex
    (setf (get-mark vertex *marker) "A mark")

    ;; Retrieving a mark
    (get-mark vertex *marker*)
    ==>  "A mark"
@end lisp


You can create and use different markers simultaneously.


@menu
* Marker Functions::
@end menu

@node Marker Functions,  , Markers, Markers
@subsection Marker Functions


@include include/fun-wo-graph-get-vertex-marker.texinfo
@include include/fun-wo-graph-get-mark.texinfo

@node Miscellaneous Functions,  , Markers, Data Structure Interface
@section Miscellaneous Functions

@include include/fun-wo-graph-copy.texinfo

@node Graph Algorithmic Interface, Simple Graph, Data Structure Interface, Top
@chapter Graph Algorithmic Interface

@include include/fun-wo-graph-sources-of-vertex.texinfo
@include include/fun-wo-graph-targets-of-vertex.texinfo
@include include/fun-wo-graph-neighbors-of-vertex.texinfo


@node Simple Graph, Function Index, Graph Algorithmic Interface, Top
@chapter A default implementation simple-graph

@include include/class-wo-graph-simple-graph.texinfo

@node Function Index,  , Simple Graph, Top
@comment  node-name,  next,  previous,  up
@appendix Function Index

@printindex fn

@bye

